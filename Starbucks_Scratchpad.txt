
# Set the figure size
plt.figure(figsize=(12, 6))

# Set the positions and width for the bars
positions = range(len(result))
width = 0.2

# Plot the bars
plt.bar(positions, result['count_offer_rcvd'], width=width, label='Count Offer Received')
plt.bar([p + width for p in positions], result['count_offer_view'], width=width, label='Count Offer Viewed')
plt.bar([p + width * 2 for p in positions], result['count_offer_cmpl'], width=width, label='Count Offer Completed')



# Set the x-axis labels and positions
plt.xlabel('Offer ID')
plt.ylabel('Counts')
plt.title('Comparison of Offer Received, Viewed, and Completed Counts by Offer ID')
plt.xticks([p + width for p in positions], result['offer_id'].str[:2])

# Add legend
plt.legend()

# Show the plot
plt.show()

# Create a bar graph to show a comparison of total revenues generate by each offer

# Set the figure size
plt.figure(figsize=(12, 6))

# Set the positions and width for the bars
positions = range(len(result))
width = 0.2

# Plot the bars
plt.bar(positions, result['sum_offer_trx_amount'], width=width, label='Sum Transaction Amount (Revenue)')

# Set the x-axis labels and positions
plt.xlabel('Offer ID')
plt.ylabel('Revenue')
plt.title('Comparison of Revenue generate by each Offer ID')
plt.xticks([p + width for p in positions], result['offer_id'].str[:2])

# Add legend
plt.legend()

# Show the plot
plt.show() 


==========================================
### new:
# Process the 'event chain' person by person and "move" the transaction amount to the offer_completed record while splitting it up relative to reward ratio
for person in persons_unique:
    # Get all offer completed records by current person in order to get their offer_rcvd_time value
    transcript_norm_pers = transcript_norm[(transcript_norm['person'] == person) & ((transcript_norm['event'] == 'offer viewed') | (transcript_norm['event'] == 'offer completed'))]
    # print(f"transcript_norm_pers {person}:\n {transcript_norm_pers[['person', 'event', 'time', 'offer_id']]}")
    # Make point in time unique (in case of several offers completed at same time) 
    time_list_unique = transcript_norm_pers['time'].unique()
    # print(f"time_list_unique {time_list_unique}")    
    for time in time_list_unique:
        # Get all offers completed records being recorded at time of completion of current offer.
        transcript_norm_pers_time = transcript_norm_pers[(transcript_norm_pers['time'] == time) & ((transcript_norm_pers['event'] == 'offer viewed') | (transcript_norm_pers['event'] == 'offer completed'))]
        print(f"*** transcript_norm_pers_time:\n {transcript_norm_pers_time[['person', 'event', 'time', 'offer_id', 'amount', 'offer_reward']]}")
        # print(f"type(transcript_norm_pers_time['offer_id']), {type(transcript_norm_pers_time['offer_id'])}")
        for offer_id in transcript_norm_pers_time['offer_id']:
            # Calculate the sum of all rewards of offers at that point in time:
            # print(f'time {time}')
            sum_rewards  = transcript_norm_pers_time[(transcript_norm_pers_time['time'] == time) & (transcript_norm_pers_time['event'] == 'offer completed')]['offer_reward'].values.sum()            
            # print(f'sum_rewards {sum_rewards}')
            # Use each offer_rcvd_time value to get the previous transaction record and amount
            # As some offer_rcvd_times multiple offers are completed at the same offer_rcvd_time, split the transaction value according to the reward ratio of all completed offers at offer_rcvd_time *offer_rcvd_time*
            amount_of_compl = transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'transaction') & (transcript_norm['time'] == time) & (transcript_norm_pers['event'] == 'offer completed'))]['amount'].values.sum() 
            # print(amount_of_compl)

        # Having identified all offers completed records, the sum of transaction amounts and their sum of rewards, the offer_agg needs to be updated
        update_offer_agg(offer_agg, person, time, transcript_norm_pers_time, amount_of_compl, sum_rewards)   
        
        # offer_limit_time = offer_rcvd_time
        # transcript_norm_off = transcript_norm[(transcript_norm['person']==person) & (transcript_norm['time']>=offer_rcvd_time) & (transcript_norm['time']<=(offer_rcvd_time + offer_agg_per[offer_rcvd_time]) 
        
# offer_agg[offer_agg['person'] == "2eeac8d8feae4a8cad5a6af0499a211d"]
offer_agg.to_excel(f'data/offer_agg{datetime.datetime.now().strftime("%d%m%y-%H%M%S")}.xlsx')

offer_agg
==========================================
### new:
# Process the 'event chain' person by person and "move" the transaction amount to the offer_completed record while splitting it up relative to reward ratio
for person in persons_unique:
    # Get all offer completed records by current person in order to get their offer_rcvd_time value
    transcript_norm_pers = transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed'))]
    # print(f"transcript_norm_pers {person}:\n {transcript_norm_pers[['person', 'event', 'time', 'offer_id']]}")
    # Make point in time unique (in case of several offers completed at same time) 
    time_list_unique = transcript_norm_pers['time'].unique()
    # print(f"time_list_unique {time_list_unique}")    
    for time in time_list_unique:
        # Get all offers completed records being recorded at time of completion of current offer.
        transcript_norm_pers_time = transcript_norm_pers[(transcript_norm_pers['time'] == time) & (((transcript_norm_pers['event'] == 'offer viewed') | transcript_norm_pers['event'] == 'offer completed'))]
        # print(f"*** transcript_norm_pers_time:\n {transcript_norm_pers_time[['person', 'event', 'time', 'offer_id', 'amount', 'offer_reward']]}")
        print(f"type(transcript_norm_pers_time['offer_id']), {type(transcript_norm_pers_time['offer_id'])}")
        for offer_id in transcript_norm_pers_time['offer_id']:
            # Calculate the sum of all rewards of offers at that point in time:
            # print(f'time {time}')
            sum_rewards  = transcript_norm_pers_time[(transcript_norm_pers_time['time'] == time) & (transcript_norm_pers['event'] == 'offer completed')]['offer_reward'].values.sum()            
            # print(f'sum_rewards {sum_rewards}')
            # Use each offer_rcvd_time value to get the previous transaction record and amount
            # As some offer_rcvd_times multiple offers are completed at the same offer_rcvd_time, split the transaction value according to the reward ratio of all completed offers at offer_rcvd_time *offer_rcvd_time*
            amount_of_compl = transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'transaction') & (transcript_norm['time'] == time) & (transcript_norm_pers['event'] == 'offer completed'))]['amount'].values.sum() 
            # print(amount_of_compl)

        # Having identified all offers completed records, the sum of transaction amounts and their sum of rewards, the offer_agg needs to be updated
        update_offer_agg(offer_agg, person, time, transcript_norm_pers_time, amount_of_compl, sum_rewards)   
        
        # offer_limit_time = offer_rcvd_time
        # transcript_norm_off = transcript_norm[(transcript_norm['person']==person) & (transcript_norm['time']>=offer_rcvd_time) & (transcript_norm['time']<=(offer_rcvd_time + offer_agg_per[offer_rcvd_time]) 
        
# offer_agg[offer_agg['person'] == "2eeac8d8feae4a8cad5a6af0499a211d"]
offer_agg.to_excel(f'data/offer_agg{datetime.datetime.now().strftime("%d%m%y-%H%M%S")}.xlsx')

offer_agg
==========================================
### old:
# Process the 'event chain' person by person and "move" the transaction amount to the offer_completed record while splitting it up relative to reward ratio
for person in persons_unique:
    # Get all offer completed records by current person in order to get their offer_rcvd_time value
    transcript_norm_pers = transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed'))]
    # print(f"transcript_norm_pers {person}:\n {transcript_norm_pers[['person', 'event', 'time', 'offer_id']]}")
    # Make point in time unique (in case of several offers completed at same time) 
    time_list_unique = transcript_norm_pers['time'].unique()
    # print(f"time_list_unique {time_list_unique}")    
    for time in time_list_unique:
        # Get all offers completed records being recorded at time of completion of current offer.
        transcript_norm_pers_time = transcript_norm_pers[(transcript_norm_pers['time'] == time) & (transcript_norm_pers['event'] == 'offer completed')]
        # print(f"*** transcript_norm_pers_time:\n {transcript_norm_pers_time[['person', 'event', 'time', 'offer_id', 'amount', 'offer_reward']]}")
        for offer_id in transcript_norm_pers_time['offer_id']:
            # Calculate the sum of all rewards of offers at that point in time:
            # print(f'time {time}')
            sum_rewards  = transcript_norm_pers_time[transcript_norm_pers_time['time'] == time]['offer_reward'].values.sum()            
            # print(f'sum_rewards {sum_rewards}')
            # Use each offer_rcvd_time value to get the previous transaction record and amount
            # As some offer_rcvd_times multiple offers are completed at the same offer_rcvd_time, split the transaction value according to the reward ratio of all completed offers at offer_rcvd_time *offer_rcvd_time*
            amount_of_compl = transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'transaction') & (transcript_norm['time'] == time) )]['amount'].values.sum() 
            # print(amount_of_compl)

        # Having identified all offers completed records, the sum of transaction amounts and their sum of rewards, the offer_agg needs to be updated
        update_offer_agg(offer_agg, person, time, transcript_norm_pers_time, amount_of_compl, sum_rewards)   
        
        # offer_limit_time = offer_rcvd_time
        # transcript_norm_off = transcript_norm[(transcript_norm['person']==person) & (transcript_norm['time']>=offer_rcvd_time) & (transcript_norm['time']<=(offer_rcvd_time + offer_agg_per[offer_rcvd_time]) 
        
# offer_agg[offer_agg['person'] == "2eeac8d8feae4a8cad5a6af0499a211d"]
offer_agg
        
# offer_agg[offer_agg['person'] == "2eeac8d8feae4a8cad5a6af0499a211d"]
offer_agg.to_excel(f'data/offer_agg{datetime.datetime.now().strftime("%d%m%y-%H%M%S")}.xlsx')

offer_agg



==========================================
# Process the 'event chain' person by person and "move" the transaction amount to the offer_completed record while splitting it up relative to reward ratio
for person in persons_unique:
    # Get all offers completed records by current person in order to get their offer_rcvd_time value
    offer_agg_pers = offer_agg.loc[(offer_agg['person'] == person)]
    for offer_rcvd_time in offer_agg_pers['offer_rcvd_time']:
        # Calculate the sum of all rewards of offers at that point in offer_rcvd_time:
        sum_rewards = transcript_norm[(transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer received') & (transcript_norm['offer_rcvd_time'] == offer_rcvd_time)]['offer_reward'].values.sum()
        print(transcript_norm[(transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed') & (transcript_norm['offer_rcvd_time'] == offer_rcvd_time)])
        print(f'sum_rewards {sum_rewards}')
        for offer_id in offer_agg_pers[offer_agg_pers['offer_rcvd_time'] == offer_rcvd_time]['offer_id']:
            # Use each offer_rcvd_time value to get the previous transaction record and amount
            # As sometimes multiple offers are completed at the same offer_rcvd_time, split the transaction value according to the reward ratio of all completed offers at current offer_rcvd_time 
            amount_of_compl = round((transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'transaction') & 
                                                    (transcript_norm['offer_rcvd_time'] == offer_rcvd_time))]['amount'].values.sum()) * 
                                    (transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed') & 
                                                    (transcript_norm['offer_rcvd_time'] == offer_rcvd_time) & (transcript_norm['offer_id'] == offer_id))]['offer_reward'].values.sum()) /
                                    sum_rewards, 2) 

            # Write the (distributed) amount of completion to the offer completed record.      
            offer_agg.loc[(offer_agg['person'] == person) & (offer_agg['offer_rcvd_time'] == offer_rcvd_time) & (offer_agg['offer_id'] == offer_id), 'amount_of_compl'] = amount_of_compl
        
offer_agg[offer_agg['person'] == "2eeac8d8feae4a8cad5a6af0499a211d"]

------------------------------------------
amount_of_compl !==! 0

Empty DataFrame
Columns: [person, event, offer_rcvd_time, offer_id, amount, offer_reward, channels, offer_difficulty, offer_duration, offer_type]
Index: []
sum_rewards 3.0
Empty DataFrame
Columns: [person, event, offer_rcvd_time, offer_id, amount, offer_reward, channels, offer_difficulty, offer_duration, offer_type]
Index: []
sum_rewards 2.0
==========================================

for person in persons_unique:
    # Get all offers completed records in order to get their offer_rcvd_time value
    transcript_norm_pers = transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed'))]
    for offer_rcvd_time in transcript_norm_pers['offer_rcvd_time']:
        # Calculate the sum of all rewards of offers at that point in offer_rcvd_time:
        sum_rewards = transcript_norm_pers[transcript_norm_pers ['offer_rcvd_time'] == offer_rcvd_time]['offer_reward'].values.sum()
        for offer_id in transcript_norm_pers[transcript_norm_pers['offer_rcvd_time'] == offer_rcvd_time]['offer_id']:
            # Use each offer_rcvd_time value to get the previous transaction record and amount
            # As someoffer_rcvd_times multiple offers are completed at the same offer_rcvd_time, split the transaction value according to the reward ratio of all completed offers at offer_rcvd_time *offer_rcvd_time*
            amount_of_compl = round((transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'transaction') & 
                                                    (transcript_norm['offer_rcvd_time'] == offer_rcvd_time))]['amount'].values.sum()) * 
                                    (transcript_norm[((transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed') & 
                                                    (transcript_norm['offer_rcvd_time'] == offer_rcvd_time) & (transcript_norm['offer_id'] == offer_id))]['offer_reward'].values.sum()) /
                                    sum_rewards, 2) 

            # Write the (distributed) amount of completion to the offer completed record.      
            transcript_norm.loc[(transcript_norm['person'] == person) & (transcript_norm['event'] == 'offer completed') & 
                                     (transcript_norm['offer_rcvd_time'] == offer_rcvd_time) & (transcript_norm['offer_id'] == offer_id), 'amount_of_compl'] = amount_of_compl
        
transcript_norm[transcript_norm['event'] == 'offer completed']







Given the pandas dataframe transcript_norm as 
Index: 51 entries, 0 to 281785
Data columns (total 7 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   person    51 non-null     object 
 1   event     51 non-null     object 
 2   value     51 non-null     object 
 3   time      51 non-null     int64  
 4   offer_id  34 non-null     object 
 5   amount    17 non-null     float64
 6   reward    6 non-null      float64
dtypes: float64(2), int64(1), object(4)
please translate the following sql query into python code:
SELECT person, offer_id, count(*) AS A
FROM transcript_norm
WHERE event = 'offer_received'
GROUP BY person, offer_id
HAVING count(*)>1;






        '''        
            #try:
                # Correct the dictionary string
                # corrected_value = correct_dict_string(row[col])
                #corrected_value = row[col]
                # Convert the string representation of dictionaries to actual dictionaries
                #df.at[index, col] = ast.literal_eval(corrected_value)
                print(f"{row[col]}  {type(row[col])}")
            # except (ValueError, SyntaxError):
                # If conversion fails, add the row to conversion_errors list
                conversion_errors.append(row)

        # Create a dataframe for conversion errors
        # df_conversion_errors = pd.DataFrame(conversion_errors)

        # Normalize the dictionary values in the 'col' column and join them back to the original dataframe
        # df_expanded = df.join(pd.json_normalize(df[col]))

        # Drop the original 'col' column as it's no longer needed
        # df_expanded = df_expanded.drop(columns=[col])


    # Function to correct malformed dictionary strings
    def correct_dict_string(s):
        if isinstance(s, str):
            s = re.sub(r'(\w+):', r'"\1":', s)  # Add quotes around keys
        return s


# Profile records without a corresponding transcript record
# Perform the right join to find records in profile without a corresponding transcript record
merged_df = pd.merge(transcript, profile, left_on='person', right_on='id', how='left')

# Filter the records where transcript information is missing (i.e., id is NaN)
missing_transcript_records = merged_df[merged_df['id'].isna()]

# Get the number of such records
num_missing_records = len(missing_transcript_records)

print(f"The number of profile records without a corresponding transcript record is {num_missing_records}.")



Given two dataframes
transcript as
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 306534 entries, 0 to 306533
Data columns (total 4 columns):
 #   Column  Non-Null Count   Dtype 
---  ------  --------------   ----- 
 0   person  306534 non-null  object
 1   event   306534 non-null  object
 2   value   306534 non-null  object
 3   time    306534 non-null  int64 
 
and profile as
 <class 'pandas.core.frame.DataFrame'>
RangeIndex: 17000 entries, 0 to 16999
Data columns (total 5 columns):
 #   Column            Non-Null Count  Dtype  
---  ------            --------------  -----  
 0   gender            14825 non-null  object 
 1   age               17000 non-null  int64  
 2   id                17000 non-null  object 
 3   became_member_on  17000 non-null  int64  
 4   income            14825 non-null  float64
 
 please translate the following sql query into python code:
  select a.id, a.gender, a.age, a.became_member_on, a.income, b.event, b.value, b.time
 from profile a innerjoin transcript b on a.id = b.person 
 
 
