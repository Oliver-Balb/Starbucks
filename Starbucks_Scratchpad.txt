Given the pandas dataframe transcript_norm as 
Index: 51 entries, 0 to 281785
Data columns (total 7 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   person    51 non-null     object 
 1   event     51 non-null     object 
 2   value     51 non-null     object 
 3   time      51 non-null     int64  
 4   offer_id  34 non-null     object 
 5   amount    17 non-null     float64
 6   reward    6 non-null      float64
dtypes: float64(2), int64(1), object(4)
please translate the following sql query into python code:
SELECT person, offer_id, count(*) AS A
FROM transcript_norm
WHERE event = 'offer_received'
GROUP BY person, offer_id
HAVING count(*)>1;






        '''        
            #try:
                # Correct the dictionary string
                # corrected_value = correct_dict_string(row[col])
                #corrected_value = row[col]
                # Convert the string representation of dictionaries to actual dictionaries
                #df.at[index, col] = ast.literal_eval(corrected_value)
                print(f"{row[col]}  {type(row[col])}")
            # except (ValueError, SyntaxError):
                # If conversion fails, add the row to conversion_errors list
                conversion_errors.append(row)

        # Create a dataframe for conversion errors
        # df_conversion_errors = pd.DataFrame(conversion_errors)

        # Normalize the dictionary values in the 'col' column and join them back to the original dataframe
        # df_expanded = df.join(pd.json_normalize(df[col]))

        # Drop the original 'col' column as it's no longer needed
        # df_expanded = df_expanded.drop(columns=[col])


    # Function to correct malformed dictionary strings
    def correct_dict_string(s):
        if isinstance(s, str):
            s = re.sub(r'(\w+):', r'"\1":', s)  # Add quotes around keys
        return s


# Profile records without a corresponding transcript record
# Perform the right join to find records in profile without a corresponding transcript record
merged_df = pd.merge(transcript, profile, left_on='person', right_on='id', how='left')

# Filter the records where transcript information is missing (i.e., id is NaN)
missing_transcript_records = merged_df[merged_df['id'].isna()]

# Get the number of such records
num_missing_records = len(missing_transcript_records)

print(f"The number of profile records without a corresponding transcript record is {num_missing_records}.")



Given two dataframes
transcript as
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 306534 entries, 0 to 306533
Data columns (total 4 columns):
 #   Column  Non-Null Count   Dtype 
---  ------  --------------   ----- 
 0   person  306534 non-null  object
 1   event   306534 non-null  object
 2   value   306534 non-null  object
 3   time    306534 non-null  int64 
 
and profile as
 <class 'pandas.core.frame.DataFrame'>
RangeIndex: 17000 entries, 0 to 16999
Data columns (total 5 columns):
 #   Column            Non-Null Count  Dtype  
---  ------            --------------  -----  
 0   gender            14825 non-null  object 
 1   age               17000 non-null  int64  
 2   id                17000 non-null  object 
 3   became_member_on  17000 non-null  int64  
 4   income            14825 non-null  float64
 
 please translate the following sql query into python code:
  select a.id, a.gender, a.age, a.became_member_on, a.income, b.event, b.value, b.time
 from profile a innerjoin transcript b on a.id = b.person 
 
 
